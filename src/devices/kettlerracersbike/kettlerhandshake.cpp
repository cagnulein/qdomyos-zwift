#include "kettlerhandshake.h"

#include <QRandomGenerator>

#include <algorithm>
#include <array>

namespace {
constexpr std::array<unsigned char, 16> kKettlerKey = {
    static_cast<unsigned char>('K'),
    static_cast<unsigned char>('a'),
    static_cast<unsigned char>('l'),
    static_cast<unsigned char>('N'),
    static_cast<unsigned char>('h'),
    static_cast<unsigned char>('y'),
    static_cast<unsigned char>('a'),
    static_cast<unsigned char>('w'),
    static_cast<unsigned char>('t'),
    static_cast<unsigned char>('I'),
    static_cast<unsigned char>('k'),
    static_cast<unsigned char>('9'),
    0x00, 0x00, 0x00, 0x00
};
}

namespace kettler {

QByteArray buildHandshakeSeed(const QByteArray &sessionSeed)
{
    if (sessionSeed.isEmpty()) {
        return {};
    }

    QByteArray raw(6, 0);
    raw[1] = 0x01; // matches the behaviour observed in the original APK

    // Session bytes are provided little-endian â€“ swap to match firmware expectations
    raw[2] = sessionSeed.size() > 1 ? static_cast<char>(sessionSeed.at(1)) : 0x00;
    raw[3] = static_cast<char>(sessionSeed.at(0));

    auto *rng = QRandomGenerator::system();
    raw[4] = static_cast<char>(rng->generate() & 0xFF);
    raw[5] = static_cast<char>(rng->generate() & 0xFF);

    return raw;
}

QByteArray computeHandshake(const QByteArray &handshakeRaw)
{
    if (handshakeRaw.size() != 6) {
        return {};
    }

    QByteArray padded(16, static_cast<char>(0x0A));
    std::copy(handshakeRaw.begin(), handshakeRaw.end(), padded.begin());

    auto expandKey = []() {
        std::array<unsigned char, 176> roundKeys{};
        auto &rk = roundKeys;
        for (int i = 0; i < 16; ++i) {
            rk[i] = kKettlerKey[i];
        }

        auto subWord = [](unsigned char x) -> unsigned char {
            static const unsigned char sbox[256] = {
                0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
                0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
                0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
                0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
                0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
                0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
                0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
                0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
                0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
                0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
                0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
                0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
                0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
                0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
                0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
                0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
            };
            return sbox[x];
        };

        auto rotWord = [](unsigned char *w) {
            unsigned char tmp = w[0];
            w[0] = w[1];
            w[1] = w[2];
            w[2] = w[3];
            w[3] = tmp;
        };

        auto rcon = [](int round) {
            static const unsigned char rconTable[11] = {
                0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
            };
            return rconTable[round];
        };

        int bytesGenerated = 16;
        int rconIteration = 1;
        unsigned char temp[4];

        while (bytesGenerated < 176) {
            for (int i = 0; i < 4; ++i) {
                temp[i] = rk[bytesGenerated - 4 + i];
            }

            if (bytesGenerated % 16 == 0) {
                rotWord(temp);
                for (int i = 0; i < 4; ++i) {
                    temp[i] = subWord(temp[i]);
                }
                temp[0] ^= rcon(rconIteration++);
            }

            for (int i = 0; i < 4; ++i) {
                rk[bytesGenerated] = rk[bytesGenerated - 16] ^ temp[i];
                ++bytesGenerated;
            }
        }

        return roundKeys;
    };

    static const std::array<unsigned char, 176> roundKeys = expandKey();

    auto gmul = [](unsigned char a, unsigned char b) {
        unsigned char p = 0;
        for (int i = 0; i < 8; ++i) {
            if (b & 1) p ^= a;
            bool hiBit = a & 0x80;
            a <<= 1;
            if (hiBit) a ^= 0x1b;
            b >>= 1;
        }
        return p;
    };

    auto subBytes = [](unsigned char *state) {
        static const unsigned char sbox[256] = {
            0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
            0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
            0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
            0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
            0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
            0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
            0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
            0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
            0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
            0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
            0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
            0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
            0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
            0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
            0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
            0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
        };
        for (int i = 0; i < 16; ++i) {
            state[i] = sbox[state[i]];
        }
    };

    auto shiftRows = [](unsigned char *state) {
        unsigned char tmp;
        // row 1
        tmp = state[1];
        state[1] = state[5];
        state[5] = state[9];
        state[9] = state[13];
        state[13] = tmp;
        // row 2
        tmp = state[2];
        unsigned char tmp2 = state[6];
        state[2] = state[10];
        state[6] = state[14];
        state[10] = tmp;
        state[14] = tmp2;
        // row 3
        tmp = state[3];
        state[3] = state[15];
        state[15] = state[11];
        state[11] = state[7];
        state[7] = tmp;
    };

    auto mixColumns = [&gmul](unsigned char *state) {
        for (int c = 0; c < 4; ++c) {
            unsigned char *col = state + c * 4;
            unsigned char a0 = col[0];
            unsigned char a1 = col[1];
            unsigned char a2 = col[2];
            unsigned char a3 = col[3];

            col[0] = gmul(a0, 2) ^ gmul(a1, 3) ^ a2 ^ a3;
            col[1] = a0 ^ gmul(a1, 2) ^ gmul(a2, 3) ^ a3;
            col[2] = a0 ^ a1 ^ gmul(a2, 2) ^ gmul(a3, 3);
            col[3] = gmul(a0, 3) ^ a1 ^ a2 ^ gmul(a3, 2);
        }
    };

    auto addRoundKey = [](unsigned char *state, const unsigned char *roundKey) {
        for (int i = 0; i < 16; ++i) {
            state[i] ^= roundKey[i];
        }
    };

    unsigned char state[16];
    std::copy(reinterpret_cast<const unsigned char *>(padded.constData()),
              reinterpret_cast<const unsigned char *>(padded.constData()) + 16,
              state);

    addRoundKey(state, roundKeys.data());

    for (int round = 1; round <= 9; ++round) {
        subBytes(state);
        shiftRows(state);
        mixColumns(state);
        addRoundKey(state, roundKeys.data() + 16 * round);
    }

    subBytes(state);
    shiftRows(state);
    addRoundKey(state, roundKeys.data() + 160);

    QByteArray cipher(reinterpret_cast<const char *>(state), 16);
    return cipher;
}

} // namespace kettler
