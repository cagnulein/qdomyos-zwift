buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.0'
        // Use a known working protobuf plugin version
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
    }
}

plugins {
  id "com.google.protobuf" version "0.8.17"
}

repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

def amazon = System.getenv('AMAZON')
def nordictrack = System.getenv('NORDICTRACK')

// Simple exclusion strategy - only exclude what's absolutely necessary
configurations.all {
    exclude group: 'com.google.protobuf', module: 'protobuf-java'
}

dependencies {
    implementation "androidx.core:core:1.12.0"
    implementation "androidx.core:core-ktx:1.12.0"
    
    // Use a more conservative protobuf version that definitely exists
    implementation 'com.google.protobuf:protobuf-javalite:3.19.4'

    // Minimal gRPC setup with known working versions
    implementation 'io.grpc:grpc-okhttp:1.45.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.45.1'
    implementation 'io.grpc:grpc-stub:1.45.1'
    
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Rest of dependencies with minimal exclusions
    if(amazon == "1") {
        implementation 'com.google.mlkit:text-recognition:16.0.0-beta6'
    } else if(nordictrack != "1") {
        implementation 'com.google.android.gms:play-services-mlkit-text-recognition:18.0.2'
    }

    implementation 'com.google.android.play:core:1.8.2'
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'com.android.billingclient:billing:6.0.1'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation files('libs/usb-serial-for-android-3.8.1.aar')
    androidTestImplementation "com.android.support:support-annotations:28.0.0"
    implementation 'com.google.android.gms:play-services-wearable:+'
    implementation 'com.google.android.gms:play-services-base:18.2.0'
    implementation 'com.google.android.gms:play-services-tasks:18.0.2'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'
}

// Conservative protobuf configuration with known working versions
protobuf {
    protoc {
        // Use protoc version that matches protobuf-javalite
        artifact = "com.google.protobuf:protoc:3.19.4"
    }
    plugins {
        grpc {
            // Use grpc version that matches our dependencies
            artifact = "io.grpc:protoc-gen-grpc-java:1.45.1"
        }
    }
    generateProtoTasks {
        all()*.builtins {
            java {
                option "lite"
            }
        }
        all()*.plugins {
            grpc {
                option "lite"
            }
        }
    }
}

android {
    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion '29.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/META-INF/okio.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-core.kotlin_module'
        pickFirst '**/META-INF/atomicfu.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-io.kotlin_module'
        pickFirst '**/META-INF/kotlinx-io.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-debug.kotlin_module'
        pickFirst '**/com/google/protobuf/**'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [qt5AndroidDir + '/src', 'src', 'java']
            aidl.srcDirs = [qt5AndroidDir + '/src', 'src', 'aidl']
            res.srcDirs = [qt5AndroidDir + '/res', 'res']
            resources.srcDirs = ['resources']
            renderscript.srcDirs = ['src']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']            
       }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    aaptOptions {
        noCompress 'rcc'
    }

    defaultConfig {
        resConfig "en"
        compileSdkVersion 33
        minSdkVersion = 21
        targetSdkVersion = 34
        multiDexEnabled true
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

tasks.all { task ->
     if (task.name == 'compileDebugJavaWithJavac' && amazon == "1") {
        task.dependsOn copyArm64Directory
        task.dependsOn copyArm32Directory
        }
}
}

task copyArm64Directory(type: Copy) {
    from "libs/arm64-v8a/"
    include '*arm64-v8a.so'
    into "libs/armeabi-v7a/"
}

task copyArm32Directory(type: Copy) {
    from "libs/armeabi-v7a/"
    include '*armeabi-v7a.so'
    into "libs/arm64-v8a/"
}