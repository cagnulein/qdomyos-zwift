buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.0'
    }
}

repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'com.android.application'

def amazon = System.getenv('AMAZON')
def nordictrack = System.getenv('NORDICTRACK')
println(amazon)
println(nordictrack)

// NUCLEAR EXCLUSION: Remove ALL protobuf variants from ALL dependencies
configurations.all {
    exclude group: 'com.google.protobuf'
    
    // Also exclude known problematic transitive dependencies
    exclude group: 'io.grpc', module: 'grpc-protobuf'
    exclude group: 'io.grpc', module: 'grpc-protobuf-lite'
    
    resolutionStrategy {
        // Force consistent versions across the board
        force 'androidx.core:core:1.12.0'
        force 'androidx.appcompat:appcompat:1.3.1'
        
        // Block any protobuf dependency from sneaking in
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.google.protobuf') {
                details.useTarget group: 'androidx.core', name: 'core', version: '1.12.0'
                details.because 'Block all protobuf dependencies to prevent duplicate classes'
            }
        }
    }
}

dependencies {
    implementation "androidx.core:core:1.12.0"
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0"
    
    // NO PROTOBUF DEPENDENCIES AT ALL
    // If you need protobuf functionality, add manually compiled classes to libs/
    
    // NO GRPC DEPENDENCIES - they all bring protobuf conflicts
    
    // Required for annotations only
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // ML Kit dependencies - with COMPLETE exclusions
    if(amazon == "1") {
        implementation('com.google.mlkit:text-recognition:16.0.0-beta6') {
            exclude group: 'com.google.protobuf'
            exclude group: 'io.grpc'
        }
    } else if(nordictrack != "1") {
        implementation('com.google.android.gms:play-services-mlkit-text-recognition:18.0.2') {
            exclude group: 'com.google.protobuf'
            exclude group: 'io.grpc'
        }
    }

    implementation('com.google.android.play:core:1.8.2') {
        exclude group: 'com.google.protobuf'
        exclude group: 'io.grpc'
    }

    def appcompat_version = "1.3.1"
    
    // Add back local libraries
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    
    implementation("com.android.billingclient:billing:6.0.1") {
        exclude group: 'com.google.protobuf'
        exclude group: 'io.grpc'
    }
    implementation 'com.android.support:appcompat-v7:28.0.0'

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    
    // Add back USB serial library
    implementation files('libs/usb-serial-for-android-3.8.1.aar')
    
    androidTestImplementation "com.android.support:support-annotations:28.0.0"
    
    // Add back Wearable support with COMPLETE exclusions
    implementation('com.google.android.gms:play-services-wearable:+') {
        exclude group: 'com.google.protobuf'
        exclude group: 'io.grpc'
    }

    // Enhanced Google Play Services with COMPLETE exclusions
    implementation('com.google.android.gms:play-services-base:18.2.0') {
        exclude group: 'com.google.protobuf'
        exclude group: 'io.grpc'
    }
    implementation('com.google.android.gms:play-services-tasks:18.0.2') {
        exclude group: 'com.google.protobuf'
        exclude group: 'io.grpc'
    }
    
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'
}

android {
    /*******************************************************
     * The following variables:
     * - androidBuildToolsVersion,
     * - androidCompileSdkVersion
     * - qt5AndroidDir - holds the path to qt android files
     *                   needed to build any Qt application
     *                   on Android.
     *
     * are defined in gradle.properties file. This file is
     * updated by QtCreator and androiddeployqt tools.
     * Changing them manually might break the compilation!
     *******************************************************/

    compileSdkVersion androidCompileSdkVersion.toInteger()

    buildToolsVersion '29.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/META-INF/okio.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-core.kotlin_module'
        pickFirst '**/META-INF/atomicfu.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-io.kotlin_module'
        pickFirst '**/META-INF/kotlinx-io.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-debug.kotlin_module'
        
        // AGGRESSIVE protobuf exclusion at packaging level
        exclude '**/com/google/protobuf/**'
        exclude '**/google/protobuf/**'
        exclude '**/*.proto'
        exclude '**/META-INF/com.google.protobuf*'
        
        // Exclude other potentially conflicting files
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [qt5AndroidDir + '/src', 'src', 'java']
            aidl.srcDirs = [qt5AndroidDir + '/src', 'src', 'aidl']
            res.srcDirs = [qt5AndroidDir + '/res', 'res']
            resources.srcDirs = ['resources']
            renderscript.srcDirs = ['src']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
            
            // CRITICAL: Exclude ALL proto-related files from compilation
            java {
                exclude '**/*.proto'
                exclude '**/com/google/protobuf/**'
                exclude '**/*Proto.java'
                exclude '**/*Grpc.java'
            }
       }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    // Do not compress Qt binary resources file
    aaptOptions {
        noCompress 'rcc'
    }

    defaultConfig {
        resConfig "en"
        compileSdkVersion 33
        minSdkVersion = 21
        targetSdkVersion = 34
        
        // Enable multiDex but with aggressive deduplication
        multiDexEnabled true
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
        
        // CRITICAL: Additional dex options to handle duplicate classes
        additionalParameters = [
            "--force-enable-assertions",
            "--multi-dex",
            "--min-sdk-version=21"
        ]
        
        // Increase dex processing options
        jumboMode = true
        dexInProcess = false
    }

    // ULTIMATE FIX: Configure build to ignore duplicate classes during dex merge
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // Add custom dex merge options
            variant.getPackageApplication().doFirst {
                // Force ignore duplicate classes during packaging
                project.android.dexOptions.preDexLibraries = false
            }
        }
    }

tasks.all { task ->
     if (task.name == 'compileDebugJavaWithJavac' && amazon == "1") {
        task.dependsOn copyArm64Directory
        task.dependsOn copyArm32Directory
        }
}
}

task copyArm64Directory(type: Copy) {
    from "libs/arm64-v8a/"
    include '*arm64-v8a.so'
    into "libs/armeabi-v7a/"
}

task copyArm32Directory(type: Copy) {
    from "libs/armeabi-v7a/"
    include '*armeabi-v7a.so'
    into "libs/arm64-v8a/"
}