buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
    }
}

plugins {
  id "com.google.protobuf" version "0.8.17"
}

repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

def amazon = System.getenv('AMAZON')
def nordictrack = System.getenv('NORDICTRACK')

// TARGETED exclusion - only exclude the problematic full protobuf implementations
configurations.all {
    exclude group: 'com.google.protobuf', module: 'protobuf-java'
    exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    
    resolutionStrategy {
        // Force consistent versions
        force 'com.google.protobuf:protobuf-javalite:3.19.4'
        force 'io.grpc:grpc-core:1.45.1'
        force 'io.grpc:grpc-okhttp:1.45.1'
        force 'io.grpc:grpc-protobuf-lite:1.45.1'
        force 'io.grpc:grpc-stub:1.45.1'
        
        // Replace problematic dependencies with lite versions
        dependencySubstitution {
            substitute module('com.google.protobuf:protobuf-java') using module('com.google.protobuf:protobuf-javalite:3.19.4')
            substitute module('com.google.protobuf:protobuf-lite') using module('com.google.protobuf:protobuf-javalite:3.19.4')
        }
    }
}

dependencies {
    implementation "androidx.core:core:1.12.0"
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0"
    
    // SINGLE protobuf implementation - this will provide all protobuf classes
    implementation 'com.google.protobuf:protobuf-javalite:3.19.4'

    // REQUIRED gRPC dependencies for your code to work
    implementation('io.grpc:grpc-okhttp:1.45.1') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
        // Keep protobuf-javalite
    }
    implementation('io.grpc:grpc-protobuf-lite:1.45.1') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
        // This provides ProtoLiteUtils and marshalling needed by generated code
    }
    implementation('io.grpc:grpc-stub:1.45.1') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
        // This provides MetadataUtils and stub utilities
    }
    
    // Required for annotations
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // ML Kit dependencies - with targeted exclusions
    if(amazon == "1") {
        implementation('com.google.mlkit:text-recognition:16.0.0-beta6') {
            exclude group: 'com.google.protobuf', module: 'protobuf-java'
            exclude group: 'com.google.protobuf', module: 'protobuf-lite'
        }
    } else if(nordictrack != "1") {
        implementation('com.google.android.gms:play-services-mlkit-text-recognition:18.0.2') {
            exclude group: 'com.google.protobuf', module: 'protobuf-java'
            exclude group: 'com.google.protobuf', module: 'protobuf-lite'
        }
    }

    implementation('com.google.android.play:core:1.8.2') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    }

    def appcompat_version = "1.3.1"
    
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    
    implementation("com.android.billingclient:billing:6.0.1") {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    }
    implementation 'com.android.support:appcompat-v7:28.0.0'

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    
    implementation files('libs/usb-serial-for-android-3.8.1.aar')
    
    androidTestImplementation "com.android.support:support-annotations:28.0.0"
    
    implementation('com.google.android.gms:play-services-wearable:+') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    }

    implementation('com.google.android.gms:play-services-base:18.2.0') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    }
    implementation('com.google.android.gms:play-services-tasks:18.0.2') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    }
    
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'
}

// CRITICAL: Configure protobuf plugin to generate the classes your code needs
protobuf {
    protoc {
        // Use protoc version that matches protobuf-javalite
        artifact = "com.google.protobuf:protoc:3.19.4"
    }
    plugins {
        grpc {
            // Use grpc version that matches our dependencies
            artifact = "io.grpc:protoc-gen-grpc-java:1.45.1"
        }
    }
    generateProtoTasks {
        all()*.builtins {
            java {
                option "lite"
            }
        }
        all()*.plugins {
            grpc {
                option "lite"
            }
        }
    }
}

android {
    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion '29.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/META-INF/okio.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-core.kotlin_module'
        pickFirst '**/META-INF/atomicfu.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-io.kotlin_module'
        pickFirst '**/META-INF/kotlinx-io.kotlin_module'
        pickFirst '**/META-INF/kotlinx-coroutines-debug.kotlin_module'
        
        // AGGRESSIVE but targeted protobuf conflict resolution
        // This should handle the duplicate dex classes
        pickFirst '**/com/google/protobuf/Any.class'
        pickFirst '**/com/google/protobuf/Any$1.class'
        pickFirst '**/com/google/protobuf/Any$Builder.class'
        pickFirst '**/com/google/protobuf/Any$*.class'
        pickFirst '**/com/google/protobuf/**'
        pickFirst '**/google/protobuf/**'
        
        // Also handle at dex level
        pickFirst '**/com/google/protobuf/Any$1.dex'
        pickFirst '**/com/google/protobuf/Any.dex'
        pickFirst '**/com/google/protobuf/Any$Builder.dex'
        pickFirst '**/com/google/protobuf/Any$*.dex'
        
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [qt5AndroidDir + '/src', 'src', 'java']
            aidl.srcDirs = [qt5AndroidDir + '/src', 'src', 'aidl']
            res.srcDirs = [qt5AndroidDir + '/res', 'res']
            resources.srcDirs = ['resources']
            renderscript.srcDirs = ['src']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
            
            // DO NOT exclude proto files - we need them for code generation
       }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    aaptOptions {
        noCompress 'rcc'
    }

    defaultConfig {
        resConfig "en"
        compileSdkVersion 33
        minSdkVersion = 21
        targetSdkVersion = 34
        multiDexEnabled true
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
        jumboMode = true
        
        // Configure dex to handle duplicate classes more gracefully
        additionalParameters = [
            "--force-enable-assertions",
            "--min-sdk-version=21"
        ]
    }

    // Add configuration to better handle dex merge conflicts
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // Ensure proper ordering during dex merge
            if (variant.buildType.name == 'release') {
                variant.getPackageApplication().doFirst {
                    println "Configuring ${variant.name} build to handle protobuf duplicate classes"
                    
                    // Force clean intermediate dex files before merge
                    delete fileTree(dir: "${buildDir}/intermediates/project_dex_archive/${variant.name}/out", include: "**/com/google/protobuf/Any\$*.dex")
                }
            }
        }
    }

tasks.all { task ->
     if (task.name == 'compileDebugJavaWithJavac' && amazon == "1") {
        task.dependsOn copyArm64Directory
        task.dependsOn copyArm32Directory
        }
}
}

task copyArm64Directory(type: Copy) {
    from "libs/arm64-v8a/"
    include '*arm64-v8a.so'
    into "libs/armeabi-v7a/"
}

task copyArm32Directory(type: Copy) {
    from "libs/armeabi-v7a/"
    include '*armeabi-v7a.so'
    into "libs/arm64-v8a/"
}