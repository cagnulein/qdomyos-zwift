// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_analytics.proto

// Protobuf Java Version: 3.25.8
package firebase.transport;

/**
 * <pre>
 * Top level metrics for all client analytics metrics.
 * These metrics should be sent as a part of every request that is uploaded to
 * FireLog server. In more detail, an additional LogRequest should be added to
 * the BatchedLogRequest, where the LogSource of the LogRequest should be
 * GDT_CLIENT_METRICS and the LogRequest should have a single LogEvent whose
 * payload is a ClientMetrics message.
 *
 * See go/firelog-client-analytics for more details.
 * </pre>
 *
 * Protobuf type {@code firebase.transport.ClientMetrics}
 */
public  final class ClientMetrics extends
    com.google.protobuf.GeneratedMessageLite<
        ClientMetrics, ClientMetrics.Builder> implements
    // @@protoc_insertion_point(message_implements:firebase.transport.ClientMetrics)
    ClientMetricsOrBuilder {
  private ClientMetrics() {
    logSourceMetrics_ = emptyProtobufList();
    appNamespace_ = "";
  }
  private int bitField0_;
  public static final int WINDOW_FIELD_NUMBER = 1;
  private firebase.transport.TimeWindow window_;
  /**
   * <pre>
   * The window of time over which the metrics are evaluated.
   * </pre>
   *
   * <code>.firebase.transport.TimeWindow window = 1;</code>
   */
  @java.lang.Override
  public boolean hasWindow() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The window of time over which the metrics are evaluated.
   * </pre>
   *
   * <code>.firebase.transport.TimeWindow window = 1;</code>
   */
  @java.lang.Override
  public firebase.transport.TimeWindow getWindow() {
    return window_ == null ? firebase.transport.TimeWindow.getDefaultInstance() : window_;
  }
  /**
   * <pre>
   * The window of time over which the metrics are evaluated.
   * </pre>
   *
   * <code>.firebase.transport.TimeWindow window = 1;</code>
   */
  private void setWindow(firebase.transport.TimeWindow value) {
    value.getClass();
  window_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * The window of time over which the metrics are evaluated.
   * </pre>
   *
   * <code>.firebase.transport.TimeWindow window = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeWindow(firebase.transport.TimeWindow value) {
    value.getClass();
  if (window_ != null &&
        window_ != firebase.transport.TimeWindow.getDefaultInstance()) {
      window_ =
        firebase.transport.TimeWindow.newBuilder(window_).mergeFrom(value).buildPartial();
    } else {
      window_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * The window of time over which the metrics are evaluated.
   * </pre>
   *
   * <code>.firebase.transport.TimeWindow window = 1;</code>
   */
  private void clearWindow() {  window_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int LOG_SOURCE_METRICS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<firebase.transport.LogSourceMetrics> logSourceMetrics_;
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  @java.lang.Override
  public java.util.List<firebase.transport.LogSourceMetrics> getLogSourceMetricsList() {
    return logSourceMetrics_;
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  public java.util.List<? extends firebase.transport.LogSourceMetricsOrBuilder> 
      getLogSourceMetricsOrBuilderList() {
    return logSourceMetrics_;
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  @java.lang.Override
  public int getLogSourceMetricsCount() {
    return logSourceMetrics_.size();
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  @java.lang.Override
  public firebase.transport.LogSourceMetrics getLogSourceMetrics(int index) {
    return logSourceMetrics_.get(index);
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  public firebase.transport.LogSourceMetricsOrBuilder getLogSourceMetricsOrBuilder(
      int index) {
    return logSourceMetrics_.get(index);
  }
  private void ensureLogSourceMetricsIsMutable() {
    com.google.protobuf.Internal.ProtobufList<firebase.transport.LogSourceMetrics> tmp = logSourceMetrics_;
    if (!tmp.isModifiable()) {
      logSourceMetrics_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  private void setLogSourceMetrics(
      int index, firebase.transport.LogSourceMetrics value) {
    value.getClass();
  ensureLogSourceMetricsIsMutable();
    logSourceMetrics_.set(index, value);
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  private void addLogSourceMetrics(firebase.transport.LogSourceMetrics value) {
    value.getClass();
  ensureLogSourceMetricsIsMutable();
    logSourceMetrics_.add(value);
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  private void addLogSourceMetrics(
      int index, firebase.transport.LogSourceMetrics value) {
    value.getClass();
  ensureLogSourceMetricsIsMutable();
    logSourceMetrics_.add(index, value);
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  private void addAllLogSourceMetrics(
      java.lang.Iterable<? extends firebase.transport.LogSourceMetrics> values) {
    ensureLogSourceMetricsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, logSourceMetrics_);
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  private void clearLogSourceMetrics() {
    logSourceMetrics_ = emptyProtobufList();
  }
  /**
   * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
   */
  private void removeLogSourceMetrics(int index) {
    ensureLogSourceMetricsIsMutable();
    logSourceMetrics_.remove(index);
  }

  public static final int GLOBAL_METRICS_FIELD_NUMBER = 3;
  private firebase.transport.GlobalMetrics globalMetrics_;
  /**
   * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
   */
  @java.lang.Override
  public boolean hasGlobalMetrics() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
   */
  @java.lang.Override
  public firebase.transport.GlobalMetrics getGlobalMetrics() {
    return globalMetrics_ == null ? firebase.transport.GlobalMetrics.getDefaultInstance() : globalMetrics_;
  }
  /**
   * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
   */
  private void setGlobalMetrics(firebase.transport.GlobalMetrics value) {
    value.getClass();
  globalMetrics_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeGlobalMetrics(firebase.transport.GlobalMetrics value) {
    value.getClass();
  if (globalMetrics_ != null &&
        globalMetrics_ != firebase.transport.GlobalMetrics.getDefaultInstance()) {
      globalMetrics_ =
        firebase.transport.GlobalMetrics.newBuilder(globalMetrics_).mergeFrom(value).buildPartial();
    } else {
      globalMetrics_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
   */
  private void clearGlobalMetrics() {  globalMetrics_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int APP_NAMESPACE_FIELD_NUMBER = 4;
  private java.lang.String appNamespace_;
  /**
   * <pre>
   * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
   * </pre>
   *
   * <code>string app_namespace = 4;</code>
   * @return The appNamespace.
   */
  @java.lang.Override
  public java.lang.String getAppNamespace() {
    return appNamespace_;
  }
  /**
   * <pre>
   * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
   * </pre>
   *
   * <code>string app_namespace = 4;</code>
   * @return The bytes for appNamespace.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAppNamespaceBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(appNamespace_);
  }
  /**
   * <pre>
   * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
   * </pre>
   *
   * <code>string app_namespace = 4;</code>
   * @param value The appNamespace to set.
   */
  private void setAppNamespace(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    appNamespace_ = value;
  }
  /**
   * <pre>
   * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
   * </pre>
   *
   * <code>string app_namespace = 4;</code>
   */
  private void clearAppNamespace() {

    appNamespace_ = getDefaultInstance().getAppNamespace();
  }
  /**
   * <pre>
   * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
   * </pre>
   *
   * <code>string app_namespace = 4;</code>
   * @param value The bytes for appNamespace to set.
   */
  private void setAppNamespaceBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    appNamespace_ = value.toStringUtf8();

  }

  public static firebase.transport.ClientMetrics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.ClientMetrics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.ClientMetrics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.ClientMetrics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.ClientMetrics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.ClientMetrics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.ClientMetrics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static firebase.transport.ClientMetrics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static firebase.transport.ClientMetrics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static firebase.transport.ClientMetrics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static firebase.transport.ClientMetrics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static firebase.transport.ClientMetrics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(firebase.transport.ClientMetrics prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Top level metrics for all client analytics metrics.
   * These metrics should be sent as a part of every request that is uploaded to
   * FireLog server. In more detail, an additional LogRequest should be added to
   * the BatchedLogRequest, where the LogSource of the LogRequest should be
   * GDT_CLIENT_METRICS and the LogRequest should have a single LogEvent whose
   * payload is a ClientMetrics message.
   *
   * See go/firelog-client-analytics for more details.
   * </pre>
   *
   * Protobuf type {@code firebase.transport.ClientMetrics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        firebase.transport.ClientMetrics, Builder> implements
      // @@protoc_insertion_point(builder_implements:firebase.transport.ClientMetrics)
      firebase.transport.ClientMetricsOrBuilder {
    // Construct using firebase.transport.ClientMetrics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The window of time over which the metrics are evaluated.
     * </pre>
     *
     * <code>.firebase.transport.TimeWindow window = 1;</code>
     */
    @java.lang.Override
    public boolean hasWindow() {
      return instance.hasWindow();
    }
    /**
     * <pre>
     * The window of time over which the metrics are evaluated.
     * </pre>
     *
     * <code>.firebase.transport.TimeWindow window = 1;</code>
     */
    @java.lang.Override
    public firebase.transport.TimeWindow getWindow() {
      return instance.getWindow();
    }
    /**
     * <pre>
     * The window of time over which the metrics are evaluated.
     * </pre>
     *
     * <code>.firebase.transport.TimeWindow window = 1;</code>
     */
    public Builder setWindow(firebase.transport.TimeWindow value) {
      copyOnWrite();
      instance.setWindow(value);
      return this;
      }
    /**
     * <pre>
     * The window of time over which the metrics are evaluated.
     * </pre>
     *
     * <code>.firebase.transport.TimeWindow window = 1;</code>
     */
    public Builder setWindow(
        firebase.transport.TimeWindow.Builder builderForValue) {
      copyOnWrite();
      instance.setWindow(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The window of time over which the metrics are evaluated.
     * </pre>
     *
     * <code>.firebase.transport.TimeWindow window = 1;</code>
     */
    public Builder mergeWindow(firebase.transport.TimeWindow value) {
      copyOnWrite();
      instance.mergeWindow(value);
      return this;
    }
    /**
     * <pre>
     * The window of time over which the metrics are evaluated.
     * </pre>
     *
     * <code>.firebase.transport.TimeWindow window = 1;</code>
     */
    public Builder clearWindow() {  copyOnWrite();
      instance.clearWindow();
      return this;
    }

    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    @java.lang.Override
    public java.util.List<firebase.transport.LogSourceMetrics> getLogSourceMetricsList() {
      return java.util.Collections.unmodifiableList(
          instance.getLogSourceMetricsList());
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    @java.lang.Override
    public int getLogSourceMetricsCount() {
      return instance.getLogSourceMetricsCount();
    }/**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    @java.lang.Override
    public firebase.transport.LogSourceMetrics getLogSourceMetrics(int index) {
      return instance.getLogSourceMetrics(index);
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder setLogSourceMetrics(
        int index, firebase.transport.LogSourceMetrics value) {
      copyOnWrite();
      instance.setLogSourceMetrics(index, value);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder setLogSourceMetrics(
        int index, firebase.transport.LogSourceMetrics.Builder builderForValue) {
      copyOnWrite();
      instance.setLogSourceMetrics(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder addLogSourceMetrics(firebase.transport.LogSourceMetrics value) {
      copyOnWrite();
      instance.addLogSourceMetrics(value);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder addLogSourceMetrics(
        int index, firebase.transport.LogSourceMetrics value) {
      copyOnWrite();
      instance.addLogSourceMetrics(index, value);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder addLogSourceMetrics(
        firebase.transport.LogSourceMetrics.Builder builderForValue) {
      copyOnWrite();
      instance.addLogSourceMetrics(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder addLogSourceMetrics(
        int index, firebase.transport.LogSourceMetrics.Builder builderForValue) {
      copyOnWrite();
      instance.addLogSourceMetrics(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder addAllLogSourceMetrics(
        java.lang.Iterable<? extends firebase.transport.LogSourceMetrics> values) {
      copyOnWrite();
      instance.addAllLogSourceMetrics(values);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder clearLogSourceMetrics() {
      copyOnWrite();
      instance.clearLogSourceMetrics();
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogSourceMetrics log_source_metrics = 2;</code>
     */
    public Builder removeLogSourceMetrics(int index) {
      copyOnWrite();
      instance.removeLogSourceMetrics(index);
      return this;
    }

    /**
     * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
     */
    @java.lang.Override
    public boolean hasGlobalMetrics() {
      return instance.hasGlobalMetrics();
    }
    /**
     * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
     */
    @java.lang.Override
    public firebase.transport.GlobalMetrics getGlobalMetrics() {
      return instance.getGlobalMetrics();
    }
    /**
     * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
     */
    public Builder setGlobalMetrics(firebase.transport.GlobalMetrics value) {
      copyOnWrite();
      instance.setGlobalMetrics(value);
      return this;
      }
    /**
     * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
     */
    public Builder setGlobalMetrics(
        firebase.transport.GlobalMetrics.Builder builderForValue) {
      copyOnWrite();
      instance.setGlobalMetrics(builderForValue.build());
      return this;
    }
    /**
     * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
     */
    public Builder mergeGlobalMetrics(firebase.transport.GlobalMetrics value) {
      copyOnWrite();
      instance.mergeGlobalMetrics(value);
      return this;
    }
    /**
     * <code>.firebase.transport.GlobalMetrics global_metrics = 3;</code>
     */
    public Builder clearGlobalMetrics() {  copyOnWrite();
      instance.clearGlobalMetrics();
      return this;
    }

    /**
     * <pre>
     * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
     * </pre>
     *
     * <code>string app_namespace = 4;</code>
     * @return The appNamespace.
     */
    @java.lang.Override
    public java.lang.String getAppNamespace() {
      return instance.getAppNamespace();
    }
    /**
     * <pre>
     * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
     * </pre>
     *
     * <code>string app_namespace = 4;</code>
     * @return The bytes for appNamespace.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAppNamespaceBytes() {
      return instance.getAppNamespaceBytes();
    }
    /**
     * <pre>
     * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
     * </pre>
     *
     * <code>string app_namespace = 4;</code>
     * @param value The appNamespace to set.
     * @return This builder for chaining.
     */
    public Builder setAppNamespace(
        java.lang.String value) {
      copyOnWrite();
      instance.setAppNamespace(value);
      return this;
    }
    /**
     * <pre>
     * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
     * </pre>
     *
     * <code>string app_namespace = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAppNamespace() {
      copyOnWrite();
      instance.clearAppNamespace();
      return this;
    }
    /**
     * <pre>
     * The bundle ID on Apple platforms (e.g., iOS) or the package name on Android
     * </pre>
     *
     * <code>string app_namespace = 4;</code>
     * @param value The bytes for appNamespace to set.
     * @return This builder for chaining.
     */
    public Builder setAppNamespaceBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAppNamespaceBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:firebase.transport.ClientMetrics)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new firebase.transport.ClientMetrics();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "window_",
            "logSourceMetrics_",
            firebase.transport.LogSourceMetrics.class,
            "globalMetrics_",
            "appNamespace_",
          };
          java.lang.String info =
              "\u0000\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0001\u0000\u0001\u1009\u0000\u0002" +
              "\u001b\u0003\u1009\u0001\u0004\u0208";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<firebase.transport.ClientMetrics> parser = PARSER;
        if (parser == null) {
          synchronized (firebase.transport.ClientMetrics.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<firebase.transport.ClientMetrics>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:firebase.transport.ClientMetrics)
  private static final firebase.transport.ClientMetrics DEFAULT_INSTANCE;
  static {
    ClientMetrics defaultInstance = new ClientMetrics();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ClientMetrics.class, defaultInstance);
  }

  public static firebase.transport.ClientMetrics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ClientMetrics> PARSER;

  public static com.google.protobuf.Parser<ClientMetrics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

