// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: console/calibration/ThrottleCalibration.proto

// Protobuf Java Version: 3.25.3
package com.ifit.glassos.console.calibration;

/**
 * Protobuf type {@code com.ifit.glassos.ThrottleCalibrationValues}
 */
public  final class ThrottleCalibrationValues extends
    com.google.protobuf.GeneratedMessageLite<
        ThrottleCalibrationValues, ThrottleCalibrationValues.Builder> implements
    // @@protoc_insertion_point(message_implements:com.ifit.glassos.ThrottleCalibrationValues)
    ThrottleCalibrationValuesOrBuilder {
  private ThrottleCalibrationValues() {
  }
  public static final int RAWGRADEREADING_FIELD_NUMBER = 1;
  private int rawGradeReading_;
  /**
   * <code>int32 rawGradeReading = 1;</code>
   * @return The rawGradeReading.
   */
  @java.lang.Override
  public int getRawGradeReading() {
    return rawGradeReading_;
  }
  /**
   * <code>int32 rawGradeReading = 1;</code>
   * @param value The rawGradeReading to set.
   */
  private void setRawGradeReading(int value) {
    
    rawGradeReading_ = value;
  }
  /**
   * <code>int32 rawGradeReading = 1;</code>
   */
  private void clearRawGradeReading() {

    rawGradeReading_ = 0;
  }

  public static final int RAWSPEEDREADING_FIELD_NUMBER = 2;
  private int rawSpeedReading_;
  /**
   * <code>int32 rawSpeedReading = 2;</code>
   * @return The rawSpeedReading.
   */
  @java.lang.Override
  public int getRawSpeedReading() {
    return rawSpeedReading_;
  }
  /**
   * <code>int32 rawSpeedReading = 2;</code>
   * @param value The rawSpeedReading to set.
   */
  private void setRawSpeedReading(int value) {
    
    rawSpeedReading_ = value;
  }
  /**
   * <code>int32 rawSpeedReading = 2;</code>
   */
  private void clearRawSpeedReading() {

    rawSpeedReading_ = 0;
  }

  public static final int GRADETOPTHRESHOLD_FIELD_NUMBER = 3;
  private int gradeTopThreshold_;
  /**
   * <code>int32 gradeTopThreshold = 3;</code>
   * @return The gradeTopThreshold.
   */
  @java.lang.Override
  public int getGradeTopThreshold() {
    return gradeTopThreshold_;
  }
  /**
   * <code>int32 gradeTopThreshold = 3;</code>
   * @param value The gradeTopThreshold to set.
   */
  private void setGradeTopThreshold(int value) {
    
    gradeTopThreshold_ = value;
  }
  /**
   * <code>int32 gradeTopThreshold = 3;</code>
   */
  private void clearGradeTopThreshold() {

    gradeTopThreshold_ = 0;
  }

  public static final int GRADEHIGHTHRESHOLD_FIELD_NUMBER = 4;
  private int gradeHighThreshold_;
  /**
   * <code>int32 gradeHighThreshold = 4;</code>
   * @return The gradeHighThreshold.
   */
  @java.lang.Override
  public int getGradeHighThreshold() {
    return gradeHighThreshold_;
  }
  /**
   * <code>int32 gradeHighThreshold = 4;</code>
   * @param value The gradeHighThreshold to set.
   */
  private void setGradeHighThreshold(int value) {
    
    gradeHighThreshold_ = value;
  }
  /**
   * <code>int32 gradeHighThreshold = 4;</code>
   */
  private void clearGradeHighThreshold() {

    gradeHighThreshold_ = 0;
  }

  public static final int GRADELOWTHRESHOLD_FIELD_NUMBER = 5;
  private int gradeLowThreshold_;
  /**
   * <code>int32 gradeLowThreshold = 5;</code>
   * @return The gradeLowThreshold.
   */
  @java.lang.Override
  public int getGradeLowThreshold() {
    return gradeLowThreshold_;
  }
  /**
   * <code>int32 gradeLowThreshold = 5;</code>
   * @param value The gradeLowThreshold to set.
   */
  private void setGradeLowThreshold(int value) {
    
    gradeLowThreshold_ = value;
  }
  /**
   * <code>int32 gradeLowThreshold = 5;</code>
   */
  private void clearGradeLowThreshold() {

    gradeLowThreshold_ = 0;
  }

  public static final int GRADEBOTTOMTHRESHOLD_FIELD_NUMBER = 6;
  private int gradeBottomThreshold_;
  /**
   * <code>int32 gradeBottomThreshold = 6;</code>
   * @return The gradeBottomThreshold.
   */
  @java.lang.Override
  public int getGradeBottomThreshold() {
    return gradeBottomThreshold_;
  }
  /**
   * <code>int32 gradeBottomThreshold = 6;</code>
   * @param value The gradeBottomThreshold to set.
   */
  private void setGradeBottomThreshold(int value) {
    
    gradeBottomThreshold_ = value;
  }
  /**
   * <code>int32 gradeBottomThreshold = 6;</code>
   */
  private void clearGradeBottomThreshold() {

    gradeBottomThreshold_ = 0;
  }

  public static final int GRADEFILTERCONSTANT_FIELD_NUMBER = 7;
  private int gradeFilterConstant_;
  /**
   * <code>int32 gradeFilterConstant = 7;</code>
   * @return The gradeFilterConstant.
   */
  @java.lang.Override
  public int getGradeFilterConstant() {
    return gradeFilterConstant_;
  }
  /**
   * <code>int32 gradeFilterConstant = 7;</code>
   * @param value The gradeFilterConstant to set.
   */
  private void setGradeFilterConstant(int value) {
    
    gradeFilterConstant_ = value;
  }
  /**
   * <code>int32 gradeFilterConstant = 7;</code>
   */
  private void clearGradeFilterConstant() {

    gradeFilterConstant_ = 0;
  }

  public static final int SPEEDTOPTHRESHOLD_FIELD_NUMBER = 8;
  private int speedTopThreshold_;
  /**
   * <code>int32 speedTopThreshold = 8;</code>
   * @return The speedTopThreshold.
   */
  @java.lang.Override
  public int getSpeedTopThreshold() {
    return speedTopThreshold_;
  }
  /**
   * <code>int32 speedTopThreshold = 8;</code>
   * @param value The speedTopThreshold to set.
   */
  private void setSpeedTopThreshold(int value) {
    
    speedTopThreshold_ = value;
  }
  /**
   * <code>int32 speedTopThreshold = 8;</code>
   */
  private void clearSpeedTopThreshold() {

    speedTopThreshold_ = 0;
  }

  public static final int SPEEDHIGHTHRESHOLD_FIELD_NUMBER = 9;
  private int speedHighThreshold_;
  /**
   * <code>int32 speedHighThreshold = 9;</code>
   * @return The speedHighThreshold.
   */
  @java.lang.Override
  public int getSpeedHighThreshold() {
    return speedHighThreshold_;
  }
  /**
   * <code>int32 speedHighThreshold = 9;</code>
   * @param value The speedHighThreshold to set.
   */
  private void setSpeedHighThreshold(int value) {
    
    speedHighThreshold_ = value;
  }
  /**
   * <code>int32 speedHighThreshold = 9;</code>
   */
  private void clearSpeedHighThreshold() {

    speedHighThreshold_ = 0;
  }

  public static final int SPEEDLOWTHRESHOLD_FIELD_NUMBER = 10;
  private int speedLowThreshold_;
  /**
   * <code>int32 speedLowThreshold = 10;</code>
   * @return The speedLowThreshold.
   */
  @java.lang.Override
  public int getSpeedLowThreshold() {
    return speedLowThreshold_;
  }
  /**
   * <code>int32 speedLowThreshold = 10;</code>
   * @param value The speedLowThreshold to set.
   */
  private void setSpeedLowThreshold(int value) {
    
    speedLowThreshold_ = value;
  }
  /**
   * <code>int32 speedLowThreshold = 10;</code>
   */
  private void clearSpeedLowThreshold() {

    speedLowThreshold_ = 0;
  }

  public static final int SPEEDBOTTOMTHRESHOLD_FIELD_NUMBER = 11;
  private int speedBottomThreshold_;
  /**
   * <code>int32 speedBottomThreshold = 11;</code>
   * @return The speedBottomThreshold.
   */
  @java.lang.Override
  public int getSpeedBottomThreshold() {
    return speedBottomThreshold_;
  }
  /**
   * <code>int32 speedBottomThreshold = 11;</code>
   * @param value The speedBottomThreshold to set.
   */
  private void setSpeedBottomThreshold(int value) {
    
    speedBottomThreshold_ = value;
  }
  /**
   * <code>int32 speedBottomThreshold = 11;</code>
   */
  private void clearSpeedBottomThreshold() {

    speedBottomThreshold_ = 0;
  }

  public static final int SPEEDFILTERCONSTANT_FIELD_NUMBER = 12;
  private int speedFilterConstant_;
  /**
   * <code>int32 speedFilterConstant = 12;</code>
   * @return The speedFilterConstant.
   */
  @java.lang.Override
  public int getSpeedFilterConstant() {
    return speedFilterConstant_;
  }
  /**
   * <code>int32 speedFilterConstant = 12;</code>
   * @param value The speedFilterConstant to set.
   */
  private void setSpeedFilterConstant(int value) {
    
    speedFilterConstant_ = value;
  }
  /**
   * <code>int32 speedFilterConstant = 12;</code>
   */
  private void clearSpeedFilterConstant() {

    speedFilterConstant_ = 0;
  }

  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.ifit.glassos.console.calibration.ThrottleCalibrationValues prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code com.ifit.glassos.ThrottleCalibrationValues}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.ifit.glassos.console.calibration.ThrottleCalibrationValues, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.ifit.glassos.ThrottleCalibrationValues)
      com.ifit.glassos.console.calibration.ThrottleCalibrationValuesOrBuilder {
    // Construct using com.ifit.glassos.console.calibration.ThrottleCalibrationValues.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>int32 rawGradeReading = 1;</code>
     * @return The rawGradeReading.
     */
    @java.lang.Override
    public int getRawGradeReading() {
      return instance.getRawGradeReading();
    }
    /**
     * <code>int32 rawGradeReading = 1;</code>
     * @param value The rawGradeReading to set.
     * @return This builder for chaining.
     */
    public Builder setRawGradeReading(int value) {
      copyOnWrite();
      instance.setRawGradeReading(value);
      return this;
    }
    /**
     * <code>int32 rawGradeReading = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearRawGradeReading() {
      copyOnWrite();
      instance.clearRawGradeReading();
      return this;
    }

    /**
     * <code>int32 rawSpeedReading = 2;</code>
     * @return The rawSpeedReading.
     */
    @java.lang.Override
    public int getRawSpeedReading() {
      return instance.getRawSpeedReading();
    }
    /**
     * <code>int32 rawSpeedReading = 2;</code>
     * @param value The rawSpeedReading to set.
     * @return This builder for chaining.
     */
    public Builder setRawSpeedReading(int value) {
      copyOnWrite();
      instance.setRawSpeedReading(value);
      return this;
    }
    /**
     * <code>int32 rawSpeedReading = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearRawSpeedReading() {
      copyOnWrite();
      instance.clearRawSpeedReading();
      return this;
    }

    /**
     * <code>int32 gradeTopThreshold = 3;</code>
     * @return The gradeTopThreshold.
     */
    @java.lang.Override
    public int getGradeTopThreshold() {
      return instance.getGradeTopThreshold();
    }
    /**
     * <code>int32 gradeTopThreshold = 3;</code>
     * @param value The gradeTopThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setGradeTopThreshold(int value) {
      copyOnWrite();
      instance.setGradeTopThreshold(value);
      return this;
    }
    /**
     * <code>int32 gradeTopThreshold = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearGradeTopThreshold() {
      copyOnWrite();
      instance.clearGradeTopThreshold();
      return this;
    }

    /**
     * <code>int32 gradeHighThreshold = 4;</code>
     * @return The gradeHighThreshold.
     */
    @java.lang.Override
    public int getGradeHighThreshold() {
      return instance.getGradeHighThreshold();
    }
    /**
     * <code>int32 gradeHighThreshold = 4;</code>
     * @param value The gradeHighThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setGradeHighThreshold(int value) {
      copyOnWrite();
      instance.setGradeHighThreshold(value);
      return this;
    }
    /**
     * <code>int32 gradeHighThreshold = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearGradeHighThreshold() {
      copyOnWrite();
      instance.clearGradeHighThreshold();
      return this;
    }

    /**
     * <code>int32 gradeLowThreshold = 5;</code>
     * @return The gradeLowThreshold.
     */
    @java.lang.Override
    public int getGradeLowThreshold() {
      return instance.getGradeLowThreshold();
    }
    /**
     * <code>int32 gradeLowThreshold = 5;</code>
     * @param value The gradeLowThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setGradeLowThreshold(int value) {
      copyOnWrite();
      instance.setGradeLowThreshold(value);
      return this;
    }
    /**
     * <code>int32 gradeLowThreshold = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearGradeLowThreshold() {
      copyOnWrite();
      instance.clearGradeLowThreshold();
      return this;
    }

    /**
     * <code>int32 gradeBottomThreshold = 6;</code>
     * @return The gradeBottomThreshold.
     */
    @java.lang.Override
    public int getGradeBottomThreshold() {
      return instance.getGradeBottomThreshold();
    }
    /**
     * <code>int32 gradeBottomThreshold = 6;</code>
     * @param value The gradeBottomThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setGradeBottomThreshold(int value) {
      copyOnWrite();
      instance.setGradeBottomThreshold(value);
      return this;
    }
    /**
     * <code>int32 gradeBottomThreshold = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearGradeBottomThreshold() {
      copyOnWrite();
      instance.clearGradeBottomThreshold();
      return this;
    }

    /**
     * <code>int32 gradeFilterConstant = 7;</code>
     * @return The gradeFilterConstant.
     */
    @java.lang.Override
    public int getGradeFilterConstant() {
      return instance.getGradeFilterConstant();
    }
    /**
     * <code>int32 gradeFilterConstant = 7;</code>
     * @param value The gradeFilterConstant to set.
     * @return This builder for chaining.
     */
    public Builder setGradeFilterConstant(int value) {
      copyOnWrite();
      instance.setGradeFilterConstant(value);
      return this;
    }
    /**
     * <code>int32 gradeFilterConstant = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearGradeFilterConstant() {
      copyOnWrite();
      instance.clearGradeFilterConstant();
      return this;
    }

    /**
     * <code>int32 speedTopThreshold = 8;</code>
     * @return The speedTopThreshold.
     */
    @java.lang.Override
    public int getSpeedTopThreshold() {
      return instance.getSpeedTopThreshold();
    }
    /**
     * <code>int32 speedTopThreshold = 8;</code>
     * @param value The speedTopThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setSpeedTopThreshold(int value) {
      copyOnWrite();
      instance.setSpeedTopThreshold(value);
      return this;
    }
    /**
     * <code>int32 speedTopThreshold = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpeedTopThreshold() {
      copyOnWrite();
      instance.clearSpeedTopThreshold();
      return this;
    }

    /**
     * <code>int32 speedHighThreshold = 9;</code>
     * @return The speedHighThreshold.
     */
    @java.lang.Override
    public int getSpeedHighThreshold() {
      return instance.getSpeedHighThreshold();
    }
    /**
     * <code>int32 speedHighThreshold = 9;</code>
     * @param value The speedHighThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setSpeedHighThreshold(int value) {
      copyOnWrite();
      instance.setSpeedHighThreshold(value);
      return this;
    }
    /**
     * <code>int32 speedHighThreshold = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpeedHighThreshold() {
      copyOnWrite();
      instance.clearSpeedHighThreshold();
      return this;
    }

    /**
     * <code>int32 speedLowThreshold = 10;</code>
     * @return The speedLowThreshold.
     */
    @java.lang.Override
    public int getSpeedLowThreshold() {
      return instance.getSpeedLowThreshold();
    }
    /**
     * <code>int32 speedLowThreshold = 10;</code>
     * @param value The speedLowThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setSpeedLowThreshold(int value) {
      copyOnWrite();
      instance.setSpeedLowThreshold(value);
      return this;
    }
    /**
     * <code>int32 speedLowThreshold = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpeedLowThreshold() {
      copyOnWrite();
      instance.clearSpeedLowThreshold();
      return this;
    }

    /**
     * <code>int32 speedBottomThreshold = 11;</code>
     * @return The speedBottomThreshold.
     */
    @java.lang.Override
    public int getSpeedBottomThreshold() {
      return instance.getSpeedBottomThreshold();
    }
    /**
     * <code>int32 speedBottomThreshold = 11;</code>
     * @param value The speedBottomThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setSpeedBottomThreshold(int value) {
      copyOnWrite();
      instance.setSpeedBottomThreshold(value);
      return this;
    }
    /**
     * <code>int32 speedBottomThreshold = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpeedBottomThreshold() {
      copyOnWrite();
      instance.clearSpeedBottomThreshold();
      return this;
    }

    /**
     * <code>int32 speedFilterConstant = 12;</code>
     * @return The speedFilterConstant.
     */
    @java.lang.Override
    public int getSpeedFilterConstant() {
      return instance.getSpeedFilterConstant();
    }
    /**
     * <code>int32 speedFilterConstant = 12;</code>
     * @param value The speedFilterConstant to set.
     * @return This builder for chaining.
     */
    public Builder setSpeedFilterConstant(int value) {
      copyOnWrite();
      instance.setSpeedFilterConstant(value);
      return this;
    }
    /**
     * <code>int32 speedFilterConstant = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpeedFilterConstant() {
      copyOnWrite();
      instance.clearSpeedFilterConstant();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.ifit.glassos.ThrottleCalibrationValues)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.ifit.glassos.console.calibration.ThrottleCalibrationValues();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "rawGradeReading_",
            "rawSpeedReading_",
            "gradeTopThreshold_",
            "gradeHighThreshold_",
            "gradeLowThreshold_",
            "gradeBottomThreshold_",
            "gradeFilterConstant_",
            "speedTopThreshold_",
            "speedHighThreshold_",
            "speedLowThreshold_",
            "speedBottomThreshold_",
            "speedFilterConstant_",
          };
          java.lang.String info =
              "\u0000\f\u0000\u0000\u0001\f\f\u0000\u0000\u0000\u0001\u0004\u0002\u0004\u0003\u0004" +
              "\u0004\u0004\u0005\u0004\u0006\u0004\u0007\u0004\b\u0004\t\u0004\n\u0004\u000b\u0004" +
              "\f\u0004";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.ifit.glassos.console.calibration.ThrottleCalibrationValues> parser = PARSER;
        if (parser == null) {
          synchronized (com.ifit.glassos.console.calibration.ThrottleCalibrationValues.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.ifit.glassos.console.calibration.ThrottleCalibrationValues>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.ifit.glassos.ThrottleCalibrationValues)
  private static final com.ifit.glassos.console.calibration.ThrottleCalibrationValues DEFAULT_INSTANCE;
  static {
    ThrottleCalibrationValues defaultInstance = new ThrottleCalibrationValues();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ThrottleCalibrationValues.class, defaultInstance);
  }

  public static com.ifit.glassos.console.calibration.ThrottleCalibrationValues getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ThrottleCalibrationValues> PARSER;

  public static com.google.protobuf.Parser<ThrottleCalibrationValues> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

