// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth/AuthService.proto

// Protobuf Java Version: 3.25.8
package com.ifit.glassos.auth;

public interface AuthQRCodePollingStateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:com.ifit.glassos.AuthQRCodePollingState)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_IDLE pollingIdle = 1;</code>
   * @return Whether the pollingIdle field is set.
   */
  boolean hasPollingIdle();
  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_IDLE pollingIdle = 1;</code>
   * @return The pollingIdle.
   */
  com.ifit.glassos.auth.AUTH_QR_CODE_POLLING_IDLE getPollingIdle();

  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_ACTIVE pollingActive = 2;</code>
   * @return Whether the pollingActive field is set.
   */
  boolean hasPollingActive();
  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_ACTIVE pollingActive = 2;</code>
   * @return The pollingActive.
   */
  com.ifit.glassos.auth.AUTH_QR_CODE_POLLING_ACTIVE getPollingActive();

  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_EXPIRED pollingExpired = 3;</code>
   * @return Whether the pollingExpired field is set.
   */
  boolean hasPollingExpired();
  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_EXPIRED pollingExpired = 3;</code>
   * @return The pollingExpired.
   */
  com.ifit.glassos.auth.AUTH_QR_CODE_POLLING_EXPIRED getPollingExpired();

  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_USER_AUTHED pollingUserAuthed = 4;</code>
   * @return Whether the pollingUserAuthed field is set.
   */
  boolean hasPollingUserAuthed();
  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_USER_AUTHED pollingUserAuthed = 4;</code>
   * @return The pollingUserAuthed.
   */
  com.ifit.glassos.auth.AUTH_QR_CODE_POLLING_USER_AUTHED getPollingUserAuthed();

  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_ERROR pollingError = 5;</code>
   * @return Whether the pollingError field is set.
   */
  boolean hasPollingError();
  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_ERROR pollingError = 5;</code>
   * @return The pollingError.
   */
  com.ifit.glassos.auth.AUTH_QR_CODE_POLLING_ERROR getPollingError();

  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_AUTH_ERROR pollingAuthError = 6;</code>
   * @return Whether the pollingAuthError field is set.
   */
  boolean hasPollingAuthError();
  /**
   * <code>.com.ifit.glassos.AUTH_QR_CODE_POLLING_AUTH_ERROR pollingAuthError = 6;</code>
   * @return The pollingAuthError.
   */
  com.ifit.glassos.auth.AUTH_QR_CODE_POLLING_AUTH_ERROR getPollingAuthError();

  public com.ifit.glassos.auth.AuthQRCodePollingState.StateCase getStateCase();
}
