// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_analytics.proto

// Protobuf Java Version: 3.25.8
package firebase.transport;

/**
 * <pre>
 * Metrics per log source.
 * </pre>
 *
 * Protobuf type {@code firebase.transport.LogSourceMetrics}
 */
public  final class LogSourceMetrics extends
    com.google.protobuf.GeneratedMessageLite<
        LogSourceMetrics, LogSourceMetrics.Builder> implements
    // @@protoc_insertion_point(message_implements:firebase.transport.LogSourceMetrics)
    LogSourceMetricsOrBuilder {
  private LogSourceMetrics() {
    logSource_ = "";
    logEventDropped_ = emptyProtobufList();
  }
  public static final int LOG_SOURCE_FIELD_NUMBER = 1;
  private java.lang.String logSource_;
  /**
   * <pre>
   * A LogSource uniquely identifies a logging configuration. log_source should
   * contains a string value of the LogSource from
   * google3/wireless/android/play/playlog/proto/clientanalytics.proto
   * </pre>
   *
   * <code>string log_source = 1;</code>
   * @return The logSource.
   */
  @java.lang.Override
  public java.lang.String getLogSource() {
    return logSource_;
  }
  /**
   * <pre>
   * A LogSource uniquely identifies a logging configuration. log_source should
   * contains a string value of the LogSource from
   * google3/wireless/android/play/playlog/proto/clientanalytics.proto
   * </pre>
   *
   * <code>string log_source = 1;</code>
   * @return The bytes for logSource.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLogSourceBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(logSource_);
  }
  /**
   * <pre>
   * A LogSource uniquely identifies a logging configuration. log_source should
   * contains a string value of the LogSource from
   * google3/wireless/android/play/playlog/proto/clientanalytics.proto
   * </pre>
   *
   * <code>string log_source = 1;</code>
   * @param value The logSource to set.
   */
  private void setLogSource(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    logSource_ = value;
  }
  /**
   * <pre>
   * A LogSource uniquely identifies a logging configuration. log_source should
   * contains a string value of the LogSource from
   * google3/wireless/android/play/playlog/proto/clientanalytics.proto
   * </pre>
   *
   * <code>string log_source = 1;</code>
   */
  private void clearLogSource() {

    logSource_ = getDefaultInstance().getLogSource();
  }
  /**
   * <pre>
   * A LogSource uniquely identifies a logging configuration. log_source should
   * contains a string value of the LogSource from
   * google3/wireless/android/play/playlog/proto/clientanalytics.proto
   * </pre>
   *
   * <code>string log_source = 1;</code>
   * @param value The bytes for logSource to set.
   */
  private void setLogSourceBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    logSource_ = value.toStringUtf8();

  }

  public static final int LOG_EVENT_DROPPED_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<firebase.transport.LogEventDropped> logEventDropped_;
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  @java.lang.Override
  public java.util.List<firebase.transport.LogEventDropped> getLogEventDroppedList() {
    return logEventDropped_;
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  public java.util.List<? extends firebase.transport.LogEventDroppedOrBuilder> 
      getLogEventDroppedOrBuilderList() {
    return logEventDropped_;
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  @java.lang.Override
  public int getLogEventDroppedCount() {
    return logEventDropped_.size();
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  @java.lang.Override
  public firebase.transport.LogEventDropped getLogEventDropped(int index) {
    return logEventDropped_.get(index);
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  public firebase.transport.LogEventDroppedOrBuilder getLogEventDroppedOrBuilder(
      int index) {
    return logEventDropped_.get(index);
  }
  private void ensureLogEventDroppedIsMutable() {
    com.google.protobuf.Internal.ProtobufList<firebase.transport.LogEventDropped> tmp = logEventDropped_;
    if (!tmp.isModifiable()) {
      logEventDropped_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  private void setLogEventDropped(
      int index, firebase.transport.LogEventDropped value) {
    value.getClass();
  ensureLogEventDroppedIsMutable();
    logEventDropped_.set(index, value);
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  private void addLogEventDropped(firebase.transport.LogEventDropped value) {
    value.getClass();
  ensureLogEventDroppedIsMutable();
    logEventDropped_.add(value);
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  private void addLogEventDropped(
      int index, firebase.transport.LogEventDropped value) {
    value.getClass();
  ensureLogEventDroppedIsMutable();
    logEventDropped_.add(index, value);
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  private void addAllLogEventDropped(
      java.lang.Iterable<? extends firebase.transport.LogEventDropped> values) {
    ensureLogEventDroppedIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, logEventDropped_);
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  private void clearLogEventDropped() {
    logEventDropped_ = emptyProtobufList();
  }
  /**
   * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
   */
  private void removeLogEventDropped(int index) {
    ensureLogEventDroppedIsMutable();
    logEventDropped_.remove(index);
  }

  public static firebase.transport.LogSourceMetrics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static firebase.transport.LogSourceMetrics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static firebase.transport.LogSourceMetrics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static firebase.transport.LogSourceMetrics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(firebase.transport.LogSourceMetrics prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Metrics per log source.
   * </pre>
   *
   * Protobuf type {@code firebase.transport.LogSourceMetrics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        firebase.transport.LogSourceMetrics, Builder> implements
      // @@protoc_insertion_point(builder_implements:firebase.transport.LogSourceMetrics)
      firebase.transport.LogSourceMetricsOrBuilder {
    // Construct using firebase.transport.LogSourceMetrics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A LogSource uniquely identifies a logging configuration. log_source should
     * contains a string value of the LogSource from
     * google3/wireless/android/play/playlog/proto/clientanalytics.proto
     * </pre>
     *
     * <code>string log_source = 1;</code>
     * @return The logSource.
     */
    @java.lang.Override
    public java.lang.String getLogSource() {
      return instance.getLogSource();
    }
    /**
     * <pre>
     * A LogSource uniquely identifies a logging configuration. log_source should
     * contains a string value of the LogSource from
     * google3/wireless/android/play/playlog/proto/clientanalytics.proto
     * </pre>
     *
     * <code>string log_source = 1;</code>
     * @return The bytes for logSource.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLogSourceBytes() {
      return instance.getLogSourceBytes();
    }
    /**
     * <pre>
     * A LogSource uniquely identifies a logging configuration. log_source should
     * contains a string value of the LogSource from
     * google3/wireless/android/play/playlog/proto/clientanalytics.proto
     * </pre>
     *
     * <code>string log_source = 1;</code>
     * @param value The logSource to set.
     * @return This builder for chaining.
     */
    public Builder setLogSource(
        java.lang.String value) {
      copyOnWrite();
      instance.setLogSource(value);
      return this;
    }
    /**
     * <pre>
     * A LogSource uniquely identifies a logging configuration. log_source should
     * contains a string value of the LogSource from
     * google3/wireless/android/play/playlog/proto/clientanalytics.proto
     * </pre>
     *
     * <code>string log_source = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearLogSource() {
      copyOnWrite();
      instance.clearLogSource();
      return this;
    }
    /**
     * <pre>
     * A LogSource uniquely identifies a logging configuration. log_source should
     * contains a string value of the LogSource from
     * google3/wireless/android/play/playlog/proto/clientanalytics.proto
     * </pre>
     *
     * <code>string log_source = 1;</code>
     * @param value The bytes for logSource to set.
     * @return This builder for chaining.
     */
    public Builder setLogSourceBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLogSourceBytes(value);
      return this;
    }

    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    @java.lang.Override
    public java.util.List<firebase.transport.LogEventDropped> getLogEventDroppedList() {
      return java.util.Collections.unmodifiableList(
          instance.getLogEventDroppedList());
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    @java.lang.Override
    public int getLogEventDroppedCount() {
      return instance.getLogEventDroppedCount();
    }/**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    @java.lang.Override
    public firebase.transport.LogEventDropped getLogEventDropped(int index) {
      return instance.getLogEventDropped(index);
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder setLogEventDropped(
        int index, firebase.transport.LogEventDropped value) {
      copyOnWrite();
      instance.setLogEventDropped(index, value);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder setLogEventDropped(
        int index, firebase.transport.LogEventDropped.Builder builderForValue) {
      copyOnWrite();
      instance.setLogEventDropped(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder addLogEventDropped(firebase.transport.LogEventDropped value) {
      copyOnWrite();
      instance.addLogEventDropped(value);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder addLogEventDropped(
        int index, firebase.transport.LogEventDropped value) {
      copyOnWrite();
      instance.addLogEventDropped(index, value);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder addLogEventDropped(
        firebase.transport.LogEventDropped.Builder builderForValue) {
      copyOnWrite();
      instance.addLogEventDropped(builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder addLogEventDropped(
        int index, firebase.transport.LogEventDropped.Builder builderForValue) {
      copyOnWrite();
      instance.addLogEventDropped(index,
          builderForValue.build());
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder addAllLogEventDropped(
        java.lang.Iterable<? extends firebase.transport.LogEventDropped> values) {
      copyOnWrite();
      instance.addAllLogEventDropped(values);
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder clearLogEventDropped() {
      copyOnWrite();
      instance.clearLogEventDropped();
      return this;
    }
    /**
     * <code>repeated .firebase.transport.LogEventDropped log_event_dropped = 2;</code>
     */
    public Builder removeLogEventDropped(int index) {
      copyOnWrite();
      instance.removeLogEventDropped(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:firebase.transport.LogSourceMetrics)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new firebase.transport.LogSourceMetrics();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "logSource_",
            "logEventDropped_",
            firebase.transport.LogEventDropped.class,
          };
          java.lang.String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u0208\u0002\u001b" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<firebase.transport.LogSourceMetrics> parser = PARSER;
        if (parser == null) {
          synchronized (firebase.transport.LogSourceMetrics.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<firebase.transport.LogSourceMetrics>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:firebase.transport.LogSourceMetrics)
  private static final firebase.transport.LogSourceMetrics DEFAULT_INSTANCE;
  static {
    LogSourceMetrics defaultInstance = new LogSourceMetrics();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      LogSourceMetrics.class, defaultInstance);
  }

  public static firebase.transport.LogSourceMetrics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<LogSourceMetrics> PARSER;

  public static com.google.protobuf.Parser<LogSourceMetrics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

