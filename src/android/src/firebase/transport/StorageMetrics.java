// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_analytics.proto

// Protobuf Java Version: 3.25.8
package firebase.transport;

/**
 * Protobuf type {@code firebase.transport.StorageMetrics}
 */
public  final class StorageMetrics extends
    com.google.protobuf.GeneratedMessageLite<
        StorageMetrics, StorageMetrics.Builder> implements
    // @@protoc_insertion_point(message_implements:firebase.transport.StorageMetrics)
    StorageMetricsOrBuilder {
  private StorageMetrics() {
  }
  public static final int CURRENT_CACHE_SIZE_BYTES_FIELD_NUMBER = 1;
  private long currentCacheSizeBytes_;
  /**
   * <pre>
   * The number of bytes of storage the event cache was consuming on the client
   * at the time the request was sent.
   * </pre>
   *
   * <code>int64 current_cache_size_bytes = 1;</code>
   * @return The currentCacheSizeBytes.
   */
  @java.lang.Override
  public long getCurrentCacheSizeBytes() {
    return currentCacheSizeBytes_;
  }
  /**
   * <pre>
   * The number of bytes of storage the event cache was consuming on the client
   * at the time the request was sent.
   * </pre>
   *
   * <code>int64 current_cache_size_bytes = 1;</code>
   * @param value The currentCacheSizeBytes to set.
   */
  private void setCurrentCacheSizeBytes(long value) {
    
    currentCacheSizeBytes_ = value;
  }
  /**
   * <pre>
   * The number of bytes of storage the event cache was consuming on the client
   * at the time the request was sent.
   * </pre>
   *
   * <code>int64 current_cache_size_bytes = 1;</code>
   */
  private void clearCurrentCacheSizeBytes() {

    currentCacheSizeBytes_ = 0L;
  }

  public static final int MAX_CACHE_SIZE_BYTES_FIELD_NUMBER = 2;
  private long maxCacheSizeBytes_;
  /**
   * <pre>
   * The maximum number of bytes to which the event cache is allowed to grow.
   * </pre>
   *
   * <code>int64 max_cache_size_bytes = 2;</code>
   * @return The maxCacheSizeBytes.
   */
  @java.lang.Override
  public long getMaxCacheSizeBytes() {
    return maxCacheSizeBytes_;
  }
  /**
   * <pre>
   * The maximum number of bytes to which the event cache is allowed to grow.
   * </pre>
   *
   * <code>int64 max_cache_size_bytes = 2;</code>
   * @param value The maxCacheSizeBytes to set.
   */
  private void setMaxCacheSizeBytes(long value) {
    
    maxCacheSizeBytes_ = value;
  }
  /**
   * <pre>
   * The maximum number of bytes to which the event cache is allowed to grow.
   * </pre>
   *
   * <code>int64 max_cache_size_bytes = 2;</code>
   */
  private void clearMaxCacheSizeBytes() {

    maxCacheSizeBytes_ = 0L;
  }

  public static firebase.transport.StorageMetrics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.StorageMetrics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.StorageMetrics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.StorageMetrics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.StorageMetrics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static firebase.transport.StorageMetrics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static firebase.transport.StorageMetrics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static firebase.transport.StorageMetrics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static firebase.transport.StorageMetrics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static firebase.transport.StorageMetrics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static firebase.transport.StorageMetrics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static firebase.transport.StorageMetrics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(firebase.transport.StorageMetrics prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code firebase.transport.StorageMetrics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        firebase.transport.StorageMetrics, Builder> implements
      // @@protoc_insertion_point(builder_implements:firebase.transport.StorageMetrics)
      firebase.transport.StorageMetricsOrBuilder {
    // Construct using firebase.transport.StorageMetrics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The number of bytes of storage the event cache was consuming on the client
     * at the time the request was sent.
     * </pre>
     *
     * <code>int64 current_cache_size_bytes = 1;</code>
     * @return The currentCacheSizeBytes.
     */
    @java.lang.Override
    public long getCurrentCacheSizeBytes() {
      return instance.getCurrentCacheSizeBytes();
    }
    /**
     * <pre>
     * The number of bytes of storage the event cache was consuming on the client
     * at the time the request was sent.
     * </pre>
     *
     * <code>int64 current_cache_size_bytes = 1;</code>
     * @param value The currentCacheSizeBytes to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentCacheSizeBytes(long value) {
      copyOnWrite();
      instance.setCurrentCacheSizeBytes(value);
      return this;
    }
    /**
     * <pre>
     * The number of bytes of storage the event cache was consuming on the client
     * at the time the request was sent.
     * </pre>
     *
     * <code>int64 current_cache_size_bytes = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCurrentCacheSizeBytes() {
      copyOnWrite();
      instance.clearCurrentCacheSizeBytes();
      return this;
    }

    /**
     * <pre>
     * The maximum number of bytes to which the event cache is allowed to grow.
     * </pre>
     *
     * <code>int64 max_cache_size_bytes = 2;</code>
     * @return The maxCacheSizeBytes.
     */
    @java.lang.Override
    public long getMaxCacheSizeBytes() {
      return instance.getMaxCacheSizeBytes();
    }
    /**
     * <pre>
     * The maximum number of bytes to which the event cache is allowed to grow.
     * </pre>
     *
     * <code>int64 max_cache_size_bytes = 2;</code>
     * @param value The maxCacheSizeBytes to set.
     * @return This builder for chaining.
     */
    public Builder setMaxCacheSizeBytes(long value) {
      copyOnWrite();
      instance.setMaxCacheSizeBytes(value);
      return this;
    }
    /**
     * <pre>
     * The maximum number of bytes to which the event cache is allowed to grow.
     * </pre>
     *
     * <code>int64 max_cache_size_bytes = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxCacheSizeBytes() {
      copyOnWrite();
      instance.clearMaxCacheSizeBytes();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:firebase.transport.StorageMetrics)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new firebase.transport.StorageMetrics();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "currentCacheSizeBytes_",
            "maxCacheSizeBytes_",
          };
          java.lang.String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0002\u0002\u0002" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<firebase.transport.StorageMetrics> parser = PARSER;
        if (parser == null) {
          synchronized (firebase.transport.StorageMetrics.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<firebase.transport.StorageMetrics>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:firebase.transport.StorageMetrics)
  private static final firebase.transport.StorageMetrics DEFAULT_INSTANCE;
  static {
    StorageMetrics defaultInstance = new StorageMetrics();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      StorageMetrics.class, defaultInstance);
  }

  public static firebase.transport.StorageMetrics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StorageMetrics> PARSER;

  public static com.google.protobuf.Parser<StorageMetrics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

