name: Test Android Nightly APK

on:
  workflow_dispatch:
  push:
    branches: [ master,  github-workflow-playground, android_emulator_actions ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: "0 0 * * *"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Scarica direttamente l'APK usando il link specifico
      - name: Download APK directly
        run: |
          mkdir -p apk-debug
          wget -O apk-debug/android-debug.apk https://github.com/cagnulein/qdomyos-zwift/releases/download/nightly/android-debug.apk
          
          # Lista i file scaricati
          echo "Files in apk-debug directory:"
          ls -la apk-debug/

      - name: run tests on emulator
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86
          profile: Nexus 6
          script: |
            # Install the APK
            adb install apk-debug/android-debug.apk

            # Concedi automaticamente tutti i permessi richiesti
            # Permessi dal manifest
            echo "Granting permissions..."
            adb shell pm grant org.cagnulen.qdomyoszwift android.permission.ACCESS_FINE_LOCATION || true
            adb shell pm grant org.cagnulen.qdomyoszwift android.permission.BLUETOOTH_SCAN || true
            adb shell pm grant org.cagnulen.qdomyoszwift android.permission.BLUETOOTH_ADVERTISE || true
            adb shell pm grant org.cagnulen.qdomyoszwift android.permission.BLUETOOTH_CONNECT || true
            adb shell pm grant org.cagnulen.qdomyoszwift android.permission.READ_EXTERNAL_STORAGE || true
            adb shell pm grant org.cagnulen.qdomyoszwift android.permission.WRITE_EXTERNAL_STORAGE || true            
            
            # Start the main activity
            adb shell am start -n org.cagnulen.qdomyoszwift/org.qtproject.qt5.android.bindings.QtActivity
            
            # Wait for app to start
            sleep 20
            
            # Verify the app is running
            APP_RUNNING=$(adb shell "ps -A | grep qdomyos || echo 'NOT_FOUND'")
            if echo "$APP_RUNNING" | grep -q "NOT_FOUND"; then
              echo "App process not found in process list"
              echo "TEST FAILED: App process not running"
              exit 1
            else
              echo "App is running successfully"
            fi
            
            # Take a screenshot for verification
            adb shell screencap -p /sdcard/screenshot.png
            adb pull /sdcard/screenshot.png
            
            # Check if the package is installed
            adb shell pm list packages | grep org.cagnulen.qdomyoszwift
            
            # Display logcat output for debugging
            adb logcat -d | grep -i qdomyos

      - name: Upload test evidence
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-evidence
          path: |
            screenshot.png
          if-no-files-found: warn
      
      - name: Create test report
        if: always()
        run: |
          echo "# Android Nightly Test Report" > test-report.md
          echo "Date: $(date)" >> test-report.md
          echo "" >> test-report.md
          echo "## Test Results" >> test-report.md
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Test completed successfully" >> test-report.md
          else
            echo "❌ Test failed" >> test-report.md
          fi
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-report
          path: test-report.md
